{"version":3,"sources":["images/MyWalletLogo.svg","service/index.js","actions/index.js","pages/Login/Login.jsx","components/ExpensesList/ExpensesList.js","components/Header/Header.js","components/WalletForm/WalletForm.js","pages/Wallet/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["module","exports","ENDPOINT","a","fetch","response","json","data","fetchAPI","getCurrency","type","payload","Login","handleChange","target","setState","name","value","handleButtonValidation","state","emailInput","passwordInput","includes","length","isButtonDisabled","handleButton","event","preventDefault","submitUserInfo","props","shouldRedirect","this","to","className","src","MyWalletLogo","alt","placeholder","data-testid","onChange","disabled","onClick","href","React","Component","connect","dispatch","userEmail","ExpensesList","handleDeleteBtn","expenses","submitExpensesNewInfo","filter","expense","Number","id","map","key","description","tag","method","toFixed","exchangeRates","currency","replace","ask","states","wallet","expensesInfos","Header","email","totalValue","forEach","user","WalletForm","submitExpensesInfo","getCurrencies","currencies","htmlFor","Object","keys","currenciesName","currencyName","console","log","Wallet","App","exact","path","component","Boolean","window","location","hostname","match","INITIAL_STATE","userReducer","action","walletReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e609b7b2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/MyWalletLogo.699cfead.svg\";","const ENDPOINT = 'https://economia.awesomeapi.com.br/json/all';\r\n\r\nasync function fetchAPI() {\r\n  const response = await fetch(ENDPOINT);\r\n  const data = await response.json();\r\n  return data;\r\n}\r\n\r\nexport default fetchAPI;\r\n","// Coloque aqui suas actions\r\nimport fetchAPI from '../service';\r\n\r\nexport const LOGIN = 'LOGIN';\r\nexport const WALLET = 'WALLET';\r\nexport const GET_CURRENCIES = 'GET_CURRENCIES';\r\nexport const DELETE_EXPENSE = 'DELETE_EXPENSE';\r\n\r\nexport function loginAction(payload) {\r\n  return {\r\n    type: LOGIN,\r\n    payload,\r\n  };\r\n}\r\n\r\nexport function walletFormAction(payload) {\r\n  return {\r\n    type: WALLET,\r\n    payload,\r\n  };\r\n}\r\n\r\nexport function deleteExpense(payload) {\r\n  return {\r\n    type: DELETE_EXPENSE,\r\n    payload,\r\n  };\r\n}\r\n\r\nexport function getCurrency(data) {\r\n  return {\r\n    type: GET_CURRENCIES,\r\n    payload: data,\r\n  };\r\n}\r\n\r\nexport function fetchCurrencyAction() {\r\n  return async (dispatch) => {\r\n    try {\r\n      const data = await fetchAPI();\r\n      return dispatch(getCurrency(data));\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n}\r\n","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { loginAction } from '../../actions';\r\nimport MyWalletLogo from '../../images/MyWalletLogo.svg';\r\nimport './Login.css';\r\n\r\nconst PASSWORD_LENGTH = 6;\r\n\r\nclass Login extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      emailInput: '',\r\n      passwordInput: '',\r\n      isButtonDisabled: true,\r\n      shouldRedirect: false,\r\n    };\r\n  }\r\n\r\n  handleChange = ({ target }) => {\r\n    this.setState({\r\n      [target.name]: target.value,\r\n    }, () => this.handleButtonValidation());\r\n  }\r\n\r\n  handleButtonValidation = () => {\r\n    const { emailInput, passwordInput } = this.state;\r\n    if (emailInput.includes('@')\r\n    && emailInput.includes('.com')\r\n    && passwordInput.length >= PASSWORD_LENGTH\r\n    ) {\r\n      this.setState({ isButtonDisabled: false });\r\n    } else {\r\n      this.setState({ isButtonDisabled: true });\r\n    }\r\n  }\r\n\r\n  handleButton = (event) => {\r\n    event.preventDefault();\r\n    const { emailInput } = this.state;\r\n    const { submitUserInfo } = this.props;\r\n    submitUserInfo(emailInput);\r\n    this.setState({ shouldRedirect: true });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      emailInput,\r\n      passwordInput,\r\n      isButtonDisabled,\r\n      shouldRedirect,\r\n    } = this.state;\r\n    if (shouldRedirect) return <Redirect to=\"/carteira\" />;\r\n    return (\r\n      <div className=\"login\">\r\n        <div className=\"login__container\">\r\n          <img className=\"login__logo\" src={ MyWalletLogo } alt=\"My Wallet Logo\" />\r\n          <h1 className=\"login__title\">MyWallet</h1>\r\n          <form className=\"login__form\">\r\n            <input\r\n              className=\"login__input\"\r\n              type=\"email\"\r\n              placeholder=\"e-mail\"\r\n              name=\"emailInput\"\r\n              data-testid=\"email-input\"\r\n              value={ emailInput }\r\n              onChange={ this.handleChange }\r\n            />\r\n            <span className=\"login__input-border\" />\r\n            <input\r\n              className=\"login__input\"\r\n              type=\"password\"\r\n              placeholder=\"senha\"\r\n              name=\"passwordInput\"\r\n              data-testid=\"password-input\"\r\n              value={ passwordInput }\r\n              onChange={ this.handleChange }\r\n            />\r\n            <span className=\"login__input-border\" />\r\n            <button\r\n              className=\"login__submit\"\r\n              type=\"submit\"\r\n              disabled={ isButtonDisabled }\r\n              onClick={ this.handleButton }\r\n            >\r\n              Entrar\r\n            </button>\r\n            <a className=\"login__reset\" href=\"a\">Esqueci minha senha</a>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  submitUserInfo: (userEmail) => dispatch(loginAction(userEmail)),\r\n});\r\n\r\nLogin.propTypes = {\r\n  submitUserInfo: PropTypes.func,\r\n}.isRequired;\r\n\r\nexport default connect(null, mapDispatchToProps)(Login);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { deleteExpense } from '../../actions';\r\nimport './ExpensesList.css';\r\n\r\nclass ExpensesList extends Component {\r\n  handleDeleteBtn = ({ target }) => {\r\n    const { expenses, submitExpensesNewInfo } = this.props;\r\n    const newExpenses = expenses\r\n      .filter((expense) => Number(expense.id) !== Number(target.value));\r\n    submitExpensesNewInfo(newExpenses);\r\n  }\r\n\r\n  render() {\r\n    const { expenses } = this.props;\r\n    return (\r\n      <div className=\"table-container\">\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Descrição</th>\r\n              <th>Tag</th>\r\n              <th>Método de pagamento</th>\r\n              <th>Valor</th>\r\n              <th>Moeda</th>\r\n              <th>Câmbio utilizado</th>\r\n              <th>Valor convertido</th>\r\n              <th>Moeda de conversão</th>\r\n              <th>Excluir</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {expenses && expenses.map((expense) => (\r\n              <tr key={ expense.id }>\r\n                <td>{ expense.description }</td>\r\n                <td>{ expense.tag }</td>\r\n                <td>{ expense.method }</td>\r\n                <td>{ Number(expense.value).toFixed(2) }</td>\r\n                <td>\r\n                  {\r\n                    expense.exchangeRates[expense.currency].name\r\n                      .replace('/Real Brasileiro', '')\r\n                  }\r\n                </td>\r\n                <td>{Number(expense.exchangeRates[expense.currency].ask).toFixed(2)}</td>\r\n                <td>\r\n                  {\r\n                    `${(Number(expense.value) * Number(expense\r\n                      .exchangeRates[expense.currency].ask)).toFixed(2)}`\r\n                  }\r\n                </td>\r\n                <td>Real</td>\r\n                <td>\r\n                  <button\r\n                    type=\"button\"\r\n                    value={ expense.id }\r\n                    data-testid=\"delete-btn\"\r\n                    onClick={ this.handleDeleteBtn }\r\n                  >\r\n                    Excluir\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  submitExpensesNewInfo: (expensesInfos) => dispatch(deleteExpense(expensesInfos)),\r\n});\r\n\r\nconst mapStateToProps = (states) => ({\r\n  expenses: states.wallet.expenses,\r\n});\r\n\r\nExpensesList.propTypes = {\r\n  expenses: PropTypes.shape({\r\n    map: PropTypes.func,\r\n  }),\r\n  submitExpensesNewInfo: PropTypes.func,\r\n}.isRequired;\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ExpensesList);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport './Header.css';\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    const { email, expenses } = this.props;\r\n\r\n    let totalValue = 0;\r\n    expenses.forEach(({ value, exchangeRates, currency }) => {\r\n      totalValue += Number(value) * Number(exchangeRates[currency].ask);\r\n    });\r\n\r\n    return (\r\n      <header className=\"header-container\">\r\n        <h1>MyWallet</h1>\r\n        <span data-testid=\"total-field\">{`Total: ${totalValue.toFixed(2)} BRL`}</span>\r\n        <span data-testid=\"email-field\">{`Email: ${email}`}</span>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  email: state.user.email,\r\n  expenses: state.wallet.expenses,\r\n});\r\n\r\nHeader.propTypes = {\r\n  email: PropTypes.string,\r\n}.isRequired;\r\n\r\nexport default connect(mapStateToProps)(Header);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { walletFormAction, fetchCurrencyAction } from '../../actions';\r\nimport fetchAPI from '../../service';\r\nimport './WalletForm.css';\r\n\r\nclass WalletForm extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      id: 0,\r\n      value: '',\r\n      description: '',\r\n      currency: 'USD',\r\n      method: 'Dinheiro',\r\n      tag: 'Alimentação',\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { getCurrencies } = this.props;\r\n    getCurrencies();\r\n  }\r\n\r\n  handleChange = ({ target }) => {\r\n    this.setState({\r\n      [target.name]: target.value,\r\n    });\r\n  }\r\n\r\n  handleButton = async (event) => {\r\n    event.preventDefault();\r\n\r\n    const {\r\n      id,\r\n      value,\r\n      description,\r\n      currency,\r\n      method,\r\n      tag,\r\n    } = this.state;\r\n\r\n    const { submitExpensesInfo } = this.props;\r\n    const exchangeRates = await fetchAPI();\r\n\r\n    submitExpensesInfo({\r\n      id,\r\n      value,\r\n      description,\r\n      currency,\r\n      method,\r\n      tag,\r\n      exchangeRates,\r\n    });\r\n\r\n    this.setState({ id: id + 1, value: '', description: '' });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      value,\r\n      description,\r\n      currency,\r\n      method,\r\n      tag,\r\n    } = this.state;\r\n\r\n    const { currencies } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <form className=\"form-container\">\r\n          <label htmlFor=\"currency-input\">\r\n            Moeda:\r\n            <select\r\n              name=\"currency\"\r\n              id=\"currency-input\"\r\n              data-testid=\"currency-input\"\r\n              value={ currency }\r\n              onChange={ this.handleChange }\r\n            >\r\n              {currencies && Object.keys(currencies)\r\n                .filter((currenciesName) => currenciesName !== 'USDT')\r\n                .map((currencyName) => (\r\n                  <option\r\n                    key={ currencyName }\r\n                    value={ currencyName }\r\n                    data-testid={ currencyName }\r\n                  >\r\n                    { currencyName }\r\n                  </option>\r\n                ))}\r\n            </select>\r\n          </label>\r\n\r\n          <label htmlFor=\"method-input\">\r\n            Método de Pagamento:\r\n            <select\r\n              name=\"method\"\r\n              id=\"method-input\"\r\n              data-testid=\"method-input\"\r\n              value={ method }\r\n              onChange={ this.handleChange }\r\n            >\r\n              <option value=\"Dinheiro\">Dinheiro</option>\r\n              <option value=\"Cartão de crédito\">Cartão de crédito</option>\r\n              <option value=\"Cartão de débito\">Cartão de débito</option>\r\n            </select>\r\n          </label>\r\n\r\n          <label htmlFor=\"tag-input\">\r\n            Tag:\r\n            <select\r\n              name=\"tag\"\r\n              id=\"tag-input\"\r\n              data-testid=\"tag-input\"\r\n              value={ tag }\r\n              onChange={ this.handleChange }\r\n            >\r\n              <option value=\"Alimentação\">Alimentação</option>\r\n              <option value=\"Lazer\">Lazer</option>\r\n              <option value=\"Trabalho\">Trabalho</option>\r\n              <option value=\"Transporte\">Transporte</option>\r\n              <option value=\"Saúde\">Saúde</option>\r\n            </select>\r\n          </label>\r\n\r\n          <label htmlFor=\"value-input\">\r\n            Valor:\r\n            <input\r\n              type=\"number\"\r\n              name=\"value\"\r\n              id=\"value-input\"\r\n              data-testid=\"value-input\"\r\n              value={ value }\r\n              onChange={ this.handleChange }\r\n            />\r\n            <span className=\"form__input-border\" />\r\n          </label>\r\n\r\n          <label htmlFor=\"description-input\">\r\n            Descrição:\r\n            <input\r\n              name=\"description\"\r\n              id=\"description-input\"\r\n              data-testid=\"description-input\"\r\n              value={ description }\r\n              onChange={ this.handleChange }\r\n            />\r\n            <span className=\"form__input-border\" />\r\n          </label>\r\n\r\n          <button\r\n            className=\"form-btn\"\r\n            type=\"submit\"\r\n            onClick={ this.handleButton }\r\n          >\r\n            Adicionar despesa\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getCurrencies: () => dispatch(fetchCurrencyAction()),\r\n  submitExpensesInfo: (expensesInfos) => dispatch(walletFormAction(expensesInfos)),\r\n});\r\n\r\nconst mapStateToProps = (state) => ({\r\n  currencies: state.wallet.currencies,\r\n});\r\n\r\nWalletForm.propTypes = {\r\n  submitExpensesInfo: PropTypes.func,\r\n}.isRequired;\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WalletForm);\r\n","import React from 'react';\r\nimport ExpensesList from '../../components/ExpensesList/ExpensesList';\r\nimport Header from '../../components/Header/Header';\r\nimport WalletForm from '../../components/WalletForm/WalletForm';\r\nimport './Wallet.css';\r\n\r\nclass Wallet extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <div className=\"form-expenses-container\">\r\n          <WalletForm />\r\n          <ExpensesList />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Wallet;\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Login from './pages/Login/Login';\r\nimport Wallet from './pages/Wallet/Wallet';\r\n\r\nfunction App() {\r\n  return (\r\n    <Switch>\r\n      <Route exact path=\"/\" component={ Login } />\r\n      <Route exact path=\"/carteira\" component={ Wallet } />\r\n    </Switch>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\r\nimport { LOGIN } from '../actions';\r\n\r\nconst INITIAL_STATE = {\r\n  email: '',\r\n};\r\n\r\nconst userReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n  case LOGIN:\r\n    return {\r\n      ...state,\r\n      email: action.payload,\r\n    };\r\n  default:\r\n    return state;\r\n  }\r\n};\r\n\r\nexport default userReducer;\r\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\r\nimport { WALLET, GET_CURRENCIES, DELETE_EXPENSE } from '../actions';\r\n\r\nconst INITIAL_STATE = {\r\n  currencies: [],\r\n  expenses: [],\r\n};\r\n\r\nconst walletReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n  case GET_CURRENCIES:\r\n    return {\r\n      ...state,\r\n      currencies: action.payload,\r\n    };\r\n  case WALLET:\r\n    return {\r\n      ...state,\r\n      expenses: [...state.expenses, action.payload],\r\n    };\r\n  case DELETE_EXPENSE:\r\n    return {\r\n      ...state,\r\n      expenses: action.payload,\r\n    };\r\n  default:\r\n    return state;\r\n  }\r\n};\r\n\r\nexport default walletReducer;\r\n","import { combineReducers } from 'redux';\r\nimport user from './user';\r\nimport wallet from './wallet';\r\n\r\n// Configure os seus reducers.\r\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\r\n\r\nconst rootReducer = combineReducers({\r\n  user,\r\n  wallet,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from '../reducers';\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(\r\n    applyMiddleware(thunk),\r\n  ),\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport './index.css';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n  <Provider store={ store }>\r\n    <BrowserRouter basename={ process.env.PUBLIC_URL }>\r\n      <App />\r\n    </BrowserRouter>\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}